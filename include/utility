/*
 * This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 *
 * original author: sillydan1 <https://github.com/sillydan1>
 * */
#ifndef AVRCPP_UTILITY_H
#define AVRCPP_UTILITY_H
#include "type_traits.h"

/* stl::move & stl::forward
 * For your C++11+ needs
 * */
namespace stl {
    template<typename T>
    constexpr typename remove_reference<T>::type&& move(T&& arg) {
        return static_cast<typename remove_reference<T>::type&&>(arg);
    }
    template <class T>
    inline T&& forward(typename stl::remove_reference<T>::type& t) noexcept {
        return static_cast<T&&>(t);
    }
    template <class T>
    inline T&& forward(typename stl::remove_reference<T>::type&& t) noexcept {
        static_assert(!stl::is_lvalue_reference<T>::value,
                      "Can not forward an rvalue as an lvalue.");
        return static_cast<T&&>(t);
    }
}

#endif
